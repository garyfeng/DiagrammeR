% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mutate_node_attrs.R
\name{mutate_node_attrs}
\alias{mutate_node_attrs}
\title{Mutate a set of node attribute values}
\usage{
mutate_node_attrs(graph, node_attr_from, expression, node_attr_to = NULL,
  round_to = 3)
}
\arguments{
\item{graph}{a graph object of class}

\item{node_attr_from}{the name of the node attribute
column from which values will be mutated.}

\item{expression}{an expression for the mutation of
all node attribute values specified by
\code{node_attr_from}. It is to be supplied as a
string where a \code{.} represents the node
attribute values.}

\item{node_attr_to}{an optionally supplied name of
a new node attribute to which the mutated values
will be applied. This will retain the original node
attribute and its values.}

\item{round_to}{the maximum number of decimal places
to retain for the mutated node attribute values. The
default value is \code{3}.}
}
\value{
a graph object of class
\code{dgr_graph}.
}
\description{
Within a graph's internal node data
frame (ndf), mutate numeric node attribute values
using an expression. Optionally, one can specify a
different node attribute name and create a new node
attribute while retaining the original node
attribute and its values.
}
\examples{
# Create a random graph
graph <-
  create_random_graph(
    5, 10, set_seed = 3)

# Get the graph's internal ndf to show which
# node attributes are available
get_node_df(graph)
#>   nodes type label value
#> 1     1          1     2
#> 2     2          2   8.5
#> 3     3          3     4
#> 4     4          4   3.5
#> 5     5          5   6.5

# Mutate the `value` node attribute, dividing each
# value by 2
graph <-
  graph \%>\%
  mutate_node_attrs("value", ". / 2")

# Get the graph's internal ndf to show that the
# node attribute values had been mutated
get_node_df(graph)
#>   nodes type label value
#> 1     1          1     1
#> 2     2          2  4.25
#> 3     3          3     2
#> 4     4          4  1.75
#> 5     5          5  3.25

# Create a new node attribute, called `width`,
# that is the log of values in `value` plus 1
graph <-
  graph \%>\%
  mutate_node_attrs("value", "log(.) + 1", "width")

# Get the graph's internal ndf to show that the
# node attribute values had been mutated and used as
# the new node attribute `width`
get_node_df(graph)
#>   nodes type label value width
#> 1     1          1     1     1
#> 2     2          2  4.25 2.447
#> 3     3          3     2 1.693
#> 4     4          4  1.75  1.56
#> 5     5          5  3.25 2.179
}

